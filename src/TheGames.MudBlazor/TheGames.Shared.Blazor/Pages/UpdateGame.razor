@page "/game/{Id:long}"
@inject AppService AppService
@inject ISnackbar Snackbar
@inject HttpClient HttpClient
@inject NavigationManager Navigation
@attribute [Authorize]

@if (record == null)
{
    <MudDialog DefaultFocus="DefaultFocus.Element">
        <TitleContent>
            <MudText Typo="Typo.h6">Update Game</MudText>
        </TitleContent>
        <DialogContent>
            <MudText>Loading...</MudText>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="OnCancel">Cancel</MudButton>
            <MudButton Color="Color.Primary" Disabled="true">Update</MudButton>
        </DialogActions>
    </MudDialog>
}
else
{
    <EditForm Model="@record" OnValidSubmit="@OnSubmit">
        <DataAnnotationsValidator />
        <MudDialog DefaultFocus="DefaultFocus.Element">
            <TitleContent>
                <MudText Typo="Typo.h6">Update Game</MudText>
            </TitleContent>
            <DialogContent>
                <MudNumericField @bind-Value="record.Id" For="@(() => record.Id)" Label="Id" ReadOnly="true" />
                <MudTextField @bind-Value="record.Name" For="@(() => record.Name)" Label="Name" />
                <MudTextField @bind-Value="record.Developer" For="@(() => record.Developer)" Label="Developer" />
                <MudSelect @bind-Value="record.PublisherId" For="@(() => record.PublisherId)" Label="Publisher" AnchorOrigin="Origin.BottomCenter">
                    <MudSelectItem T="long?" Value="null" />
                    @foreach (var publisher in publisherArray ?? Enumerable.Empty<Publisher>())
                    {
                        <MudSelectItem Value="@publisher.Id">@publisher.Name</MudSelectItem>
                    }
                </MudSelect>
            </DialogContent>
            <DialogActions>
                <MudButton OnClick="OnCancel">Cancel</MudButton>
                <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">Update</MudButton>
            </DialogActions>
        </MudDialog>
    </EditForm>
}

@code {
    [Parameter]
    public long Id { get; set; }

    [CascadingParameter]
    MudDialogInstance? MudDialog { get; set; }

    private Publisher[]? publisherArray;
    private Game? record;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            PagedResultDto<Publisher> res = await AppService.ListPublishersAsync("Name asc", 0, null);
            publisherArray = res.Items.ToArray();
            record = await AppService.GetGameByIdAsync(Id);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private void OnCancel()
    {
        MudDialog?.Cancel();
    }

    private async void OnSubmit()
    {
        if (record == null)
        {
            return;
        }

        try
        {
            await AppService.UpdateGameAsync(Id, record);
            MudDialog?.Close();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }
}
